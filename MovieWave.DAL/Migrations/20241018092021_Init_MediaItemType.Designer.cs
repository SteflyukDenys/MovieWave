// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieWave.DAL;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MovieWave.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241018092021_Init_MediaItemType")]
    partial class Init_MediaItemType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MediaItemCountries", b =>
                {
                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.HasKey("CountryId", "MediaItemId");

                    b.HasIndex("MediaItemId");

                    b.ToTable("MediaItemCountries");
                });

            modelBuilder.Entity("MediaItemStudios", b =>
                {
                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudioId")
                        .HasColumnType("uuid");

                    b.HasKey("MediaItemId", "StudioId");

                    b.HasIndex("StudioId");

                    b.ToTable("MediaItemStudios");
                });

            modelBuilder.Entity("MediaItemTags", b =>
                {
                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("MediaItemId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("MediaItemTags");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AttachmentType")
                        .HasColumnType("integer");

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("ThumbnailPath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MediaItemId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommentableId")
                        .HasColumnType("uuid");

                    b.Property<string>("CommentableType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("EpisodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MediaItemId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.HasIndex("CommentableId", "CommentableType");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AirDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<bool?>("IsFiller")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MediaItemId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.EpisodeVoice", b =>
                {
                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EpisodeId", "VoiceId");

                    b.HasIndex("VoiceId");

                    b.ToTable("EpisodeVoices");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.MediaItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<int?>("EpisodesCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FirstAirDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ImdbScore")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<DateTime?>("LastAirDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MediaItemTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("RestrictedRatingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MediaItemTypeId");

                    b.HasIndex("RestrictedRatingId");

                    b.HasIndex("StatusId");

                    b.ToTable("MediaItems");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.MediaItemPerson", b =>
                {
                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<int>("PersonRole")
                        .HasColumnType("integer");

                    b.HasKey("MediaItemId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("MediaItemPeople");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.MediaItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MediaItemName")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MediaItemTypes");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("EpisodeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MediaItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("BillingType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserSubscriptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserSubscriptionId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MediaItemId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.RestrictedRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Hint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RestrictedRatings");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MediaItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MediaItemId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("StatusType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Studio", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LogoPath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Studios");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("MaxDevices")
                        .HasColumnType("integer");

                    b.Property<int>("Name")
                        .HasColumnType("integer")
                        .HasColumnName("SubLevel");

                    b.Property<decimal>("PricePerMonth")
                        .HasColumnType("money");

                    b.Property<int>("VideoQuality")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsGenre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.UserMediaItemList", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("ListTypeId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "MediaItemId");

                    b.HasIndex("MediaItemId");

                    b.ToTable("UserMediaItemLists");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Voice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IconPath")
                        .HasColumnType("text");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Voices");
                });

            modelBuilder.Entity("MediaItemCountries", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWave.Domain.Entity.MediaItem", null)
                        .WithMany()
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaItemStudios", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.MediaItem", null)
                        .WithMany()
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWave.Domain.Entity.Studio", null)
                        .WithMany()
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaItemTags", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.MediaItem", null)
                        .WithMany()
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWave.Domain.Entity.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Attachment", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.MediaItem", "MediaItem")
                        .WithMany("Attachments")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Comment", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.Episode", null)
                        .WithMany("Comments")
                        .HasForeignKey("EpisodeId");

                    b.HasOne("MovieWave.Domain.Entity.MediaItem", null)
                        .WithMany("Comments")
                        .HasForeignKey("MediaItemId");

                    b.HasOne("MovieWave.Domain.Entity.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MovieWave.Domain.Entity.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Country", b =>
                {
                    b.OwnsOne("MovieWave.Domain.Entity.SeoAddition", "SeoAddition", b1 =>
                        {
                            b1.Property<Guid>("CountryId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<string>("MetaDescription")
                                .HasColumnType("text");

                            b1.Property<string>("MetaImagePath")
                                .HasColumnType("text");

                            b1.Property<string>("MetaTitle")
                                .HasColumnType("text");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.HasKey("CountryId");

                            b1.HasIndex("Slug")
                                .IsUnique();

                            b1.ToTable("Countries");

                            b1.WithOwner()
                                .HasForeignKey("CountryId");
                        });

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Episode", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.MediaItem", "MediaItem")
                        .WithMany("Episodes")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWave.Domain.Entity.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MovieWave.Domain.Entity.SeoAddition", "SeoAddition", b1 =>
                        {
                            b1.Property<Guid>("EpisodeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<string>("MetaDescription")
                                .HasColumnType("text");

                            b1.Property<string>("MetaImagePath")
                                .HasColumnType("text");

                            b1.Property<string>("MetaTitle")
                                .HasColumnType("text");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.HasKey("EpisodeId");

                            b1.HasIndex("Slug")
                                .IsUnique();

                            b1.ToTable("Episodes");

                            b1.WithOwner()
                                .HasForeignKey("EpisodeId");
                        });

                    b.Navigation("MediaItem");

                    b.Navigation("Season");

                    b.Navigation("SeoAddition")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.EpisodeVoice", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.Episode", "Episode")
                        .WithMany("EpisodeVoices")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWave.Domain.Entity.Voice", "Voice")
                        .WithMany("EpisodeVoices")
                        .HasForeignKey("VoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Voice");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.MediaItem", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.MediaItemType", "MediaItemType")
                        .WithMany("MediaItems")
                        .HasForeignKey("MediaItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWave.Domain.Entity.RestrictedRating", "RestrictedRating")
                        .WithMany("MediaItems")
                        .HasForeignKey("RestrictedRatingId");

                    b.HasOne("MovieWave.Domain.Entity.Status", "Status")
                        .WithMany("MediaItems")
                        .HasForeignKey("StatusId");

                    b.OwnsOne("MovieWave.Domain.Entity.SeoAddition", "SeoAddition", b1 =>
                        {
                            b1.Property<Guid>("MediaItemId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<string>("MetaDescription")
                                .HasColumnType("text");

                            b1.Property<string>("MetaImagePath")
                                .HasColumnType("text");

                            b1.Property<string>("MetaTitle")
                                .HasColumnType("text");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.HasKey("MediaItemId");

                            b1.HasIndex("Slug")
                                .IsUnique();

                            b1.ToTable("MediaItems");

                            b1.WithOwner()
                                .HasForeignKey("MediaItemId");
                        });

                    b.Navigation("MediaItemType");

                    b.Navigation("RestrictedRating");

                    b.Navigation("SeoAddition");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.MediaItemPerson", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.MediaItem", "MediaItem")
                        .WithMany("MediaItemPeople")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWave.Domain.Entity.Person", "Person")
                        .WithMany("MediaItemPeople")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.MediaItemType", b =>
                {
                    b.OwnsOne("MovieWave.Domain.Entity.SeoAddition", "SeoAddition", b1 =>
                        {
                            b1.Property<int>("MediaItemTypeId")
                                .HasColumnType("integer");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<string>("MetaDescription")
                                .HasColumnType("text");

                            b1.Property<string>("MetaImagePath")
                                .HasColumnType("text");

                            b1.Property<string>("MetaTitle")
                                .HasColumnType("text");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.HasKey("MediaItemTypeId");

                            b1.HasIndex("Slug")
                                .IsUnique();

                            b1.ToTable("MediaItemTypes");

                            b1.WithOwner()
                                .HasForeignKey("MediaItemTypeId");
                        });

                    b.Navigation("SeoAddition")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Notification", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.Episode", "Episode")
                        .WithMany("Notifications")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieWave.Domain.Entity.MediaItem", "MediaItem")
                        .WithMany("Notifications")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieWave.Domain.Entity.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("MediaItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Payment", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.UserSubscription", "UserSubscription")
                        .WithMany("Payments")
                        .HasForeignKey("UserSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSubscription");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Person", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.MediaItem", null)
                        .WithMany("People")
                        .HasForeignKey("MediaItemId");

                    b.OwnsOne("MovieWave.Domain.Entity.SeoAddition", "SeoAddition", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<string>("MetaDescription")
                                .HasColumnType("text");

                            b1.Property<string>("MetaImagePath")
                                .HasColumnType("text");

                            b1.Property<string>("MetaTitle")
                                .HasColumnType("text");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.HasKey("PersonId");

                            b1.HasIndex("Slug")
                                .IsUnique();

                            b1.ToTable("People");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("SeoAddition")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Review", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.MediaItem", "MediaItem")
                        .WithMany("Reviews")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWave.Domain.Entity.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Season", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.MediaItem", "MediaItem")
                        .WithMany("Seasons")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Studio", b =>
                {
                    b.OwnsOne("MovieWave.Domain.Entity.SeoAddition", "SeoAddition", b1 =>
                        {
                            b1.Property<Guid>("StudioId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<string>("MetaDescription")
                                .HasColumnType("text");

                            b1.Property<string>("MetaImagePath")
                                .HasColumnType("text");

                            b1.Property<string>("MetaTitle")
                                .HasColumnType("text");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.HasKey("StudioId");

                            b1.HasIndex("Slug")
                                .IsUnique();

                            b1.ToTable("Studios");

                            b1.WithOwner()
                                .HasForeignKey("StudioId");
                        });

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Tag", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.Tag", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("MovieWave.Domain.Entity.SeoAddition", "SeoAddition", b1 =>
                        {
                            b1.Property<Guid>("TagId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<string>("MetaDescription")
                                .HasColumnType("text");

                            b1.Property<string>("MetaImagePath")
                                .HasColumnType("text");

                            b1.Property<string>("MetaTitle")
                                .HasColumnType("text");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.HasKey("TagId");

                            b1.HasIndex("Slug")
                                .IsUnique();

                            b1.ToTable("Tags");

                            b1.WithOwner()
                                .HasForeignKey("TagId");
                        });

                    b.Navigation("Parent");

                    b.Navigation("SeoAddition")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.UserMediaItemList", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.MediaItem", "MediaItem")
                        .WithMany("UserMediaItemLists")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWave.Domain.Entity.User", "User")
                        .WithMany("UserMediaItemLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.UserSubscription", b =>
                {
                    b.HasOne("MovieWave.Domain.Entity.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWave.Domain.Entity.User", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Comment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Episode", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("EpisodeVoices");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.MediaItem", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("Episodes");

                    b.Navigation("MediaItemPeople");

                    b.Navigation("Notifications");

                    b.Navigation("People");

                    b.Navigation("Reviews");

                    b.Navigation("Seasons");

                    b.Navigation("UserMediaItemLists");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.MediaItemType", b =>
                {
                    b.Navigation("MediaItems");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Person", b =>
                {
                    b.Navigation("MediaItemPeople");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.RestrictedRating", b =>
                {
                    b.Navigation("MediaItems");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Status", b =>
                {
                    b.Navigation("MediaItems");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.SubscriptionPlan", b =>
                {
                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Tag", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Notifications");

                    b.Navigation("Reviews");

                    b.Navigation("UserMediaItemLists");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.UserSubscription", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MovieWave.Domain.Entity.Voice", b =>
                {
                    b.Navigation("EpisodeVoices");
                });
#pragma warning restore 612, 618
        }
    }
}
